package cop5556sp17;

import java.io.FileOutputStream;
import java.io.OutputStream;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import cop5556sp17.AST.ASTNode;
import cop5556sp17.AST.Program;

public class CodeGenVisitorTest {

	public void initLog(){
	if (devel || grade) PLPRuntimeLog.initLog();
	}

	public void printLog(){
	System.out.println(PLPRuntimeLog.getString());
	}

	static final boolean doPrint = true;
	static void show(Object s) {
	if (doPrint) {
	System.out.println(s);
	}
	}

	boolean devel = false;
	boolean grade = true;


	@Test
	public void emptyProg() throws Exception {
	//scan, parse, and type check the program
	String progname = "emptyProg";
	String input = progname + "{}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	//show(program);

	//generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
	byte[] bytecode = (byte[]) program.visit(cv, null);

	//output the generated bytecode
	//CodeGenUtils.dumpBytecode(bytecode);

	//write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);

	// directly execute bytecode
	String[] args = new String[2]; //create command line argument array to initialize params, none in this case
	args[0] = "30";
	args[1] = "30";
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	instance.run();
	}

	 @Test
     public void testmy() throws Exception {
             //scan, parse, and type check the program
             String progname = "testSimple";
             String input = progname + " {integer b b<-4;}";
             Scanner scanner = new Scanner(input);
             scanner.scan();
             Parser parser = new Parser(scanner);
             ASTNode program = parser.parse();
             TypeCheckVisitor v = new TypeCheckVisitor();
             program.visit(v, null);
             show(program);

             //generate code
             CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
             byte[] bytecode = (byte[]) program.visit(cv, null);

             //output the generated bytecode
             CodeGenUtils.dumpBytecode(bytecode);

             //write byte code to file
             String name = ((Program) program).getName();
             String classFileName = "bin/" + name + ".class";
             OutputStream output = new FileOutputStream(classFileName);
             output.write(bytecode);
             output.close();
             System.out.println("wrote classfile to " + classFileName);

             // directly execute bytecode
             String[] args = new String[0]; //create command line argument array to initialize params, none in this case
             //args[0] = "5";
             Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
             instance.run();
     }
	 @Test
	public void intLitExp0() throws Exception {
	String name = "booleanLitExp0";
	String input = name + " integer b1 {integer b3 if (true) {b3 <- b1;}}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show("\n\n" + program);

	//generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);

	//output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);

	//write byte code to file
	String classFileName = "bin/" + ((Program) program).getName() + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	show("wrote classfile to " + classFileName);

	// directly execute bytecode
	String[] args = new String[]{"1"}; //create String[] array to initialize params
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	instance.run();
	}

	@Test
	public void ProgBlitzWhile() throws Exception {
	//scan, parse, and type check the program
	String progname = "progBlitzWhile";
	String input = progname + " integer x1, integer x2 {\ninteger x3  boolean z x1<-30; z <- x1 >= x2 \n; while(z){x3<-x2; x2<-(x2+1);z <- x1 >= x2;}}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	//show(program);

	//generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
	byte[] bytecode = (byte[]) program.visit(cv, null);

	//output the generated bytecode
	//CodeGenUtils.dumpBytecode(bytecode);

	//write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);

	// directly execute bytecode
	String[] args = new String[2]; //create command line argument array to initialize params, none in this case
	args[0] = "20";
	args[1] = "20";
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	instance.run();
	}
	@Test
	public void ProgConvoluted() throws Exception {
	//scan, parse, and type check the program
	String progname = "ProgConvoluted";
	String input = progname + " integer x1, integer x2 {\ninteger x3  boolean z x1<-30; z <- x1 >= x2 \n; while(z){integer z1 z1<- 2; x3<-x2; x2<-(x2+z1); z <- x1 >= x2; if(x2>(x2+x1)/2){z1<-1;}}}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	//show(program);

	//generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
	byte[] bytecode = (byte[]) program.visit(cv, null);

	//output the generated bytecode
	//CodeGenUtils.dumpBytecode(bytecode);

	//write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);

	// directly execute bytecode
	String[] args = new String[2]; //create command line argument array to initialize params, none in this case
	args[0] = "20";
	args[1] = "20";
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	instance.run();
	}
	@Test
	public void ProgOfEquailty() throws Exception {
	//scan, parse, and type check the program
	String progname = "progOfEquailty";
	String input = progname + " integer x1, integer x2 {\ninteger x3  boolean z x1<-30; z <- x1 != x2 \n; while(z){x3<-x2; x2<-(x2+1);z <- x1 == x2;}}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	//show(program);

	//generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
	byte[] bytecode = (byte[]) program.visit(cv, null);

	//output the generated bytecode
	//CodeGenUtils.dumpBytecode(bytecode);

	//write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);

	// directly execute bytecode
	String[] args = new String[2]; //create command line argument array to initialize params, none in this case
	args[0] = "30";
	args[1] = "30";
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	instance.run();
	}

	@Test
	public void ProgWhatTheIf() throws Exception {
	//scan, parse, and type check the program
	String progname = "progWhatTheIf";
	String input = progname + " integer x1, integer x2 {\ninteger x3  boolean z x1<-30; z <- x1 >= x2 \n; if(z){x3<-x2; x2<-(x2+1);z <- x1 >= x2;}}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	//show(program);

	//generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
	byte[] bytecode = (byte[]) program.visit(cv, null);

	//output the generated bytecode
	//CodeGenUtils.dumpBytecode(bytecode);

	//write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);

	// directly execute bytecode
	String[] args = new String[2]; //create command line argument array to initialize params, none in this case
	args[0] = "20";
	args[1] = "20";
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	instance.run();
	}

	@Test
	public void paramInitialization0() throws Exception {
	String name = "paramInitialization";
	String input = name + " integer i1 {integer i2 i2 <- i1;}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show("\n\n" + program);

	//generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);

	//output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);

	//write byte code to file
	String classFileName = "bin/" + ((Program) program).getName() + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	show("wrote classfile to " + classFileName);

	// directly execute bytecode
	String[] args = new String[]{"42"}; //create String[] array to initialize params
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	instance.run();
	}

	@Test
	public void paramInitialization1() throws Exception {
	String name = "paramInitialization";
	String input = name + " integer i1, integer i2 {integer i3 i3 <- i1 + i2;}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show("\n\n" + program);

	//generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);

	//output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);

	//write byte code to file
	String classFileName = "bin/" + ((Program) program).getName() + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	show("wrote classfile to " + classFileName);

	// directly execute bytecode
	String[] args = new String[]{"42", "58"}; //create String[] array to initialize params
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	instance.run();
	}

	@Test
	public void booleanLitExp0() throws Exception {
	String name = "booleanLitExp0";
	String input = name + " boolean b1, boolean b2 {boolean b3 b3 <- b1 < b2;}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show("\n\n" + program);

	//generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);

	//output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);

	//write byte code to file
	String classFileName = "bin/" + ((Program) program).getName() + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	show("wrote classfile to " + classFileName);

	// directly execute bytecode
	String[] args = new String[]{"false", "true"}; //create String[] array to initialize params
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	instance.run();
	}

	@Test
	public void booleanLitExp1() throws Exception {
	String name = "booleanLitExp1";
	String input = name + " boolean b1, boolean b2 {boolean b3 b3 <- b1 < b2;}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show("\n\n" + program);

	//generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);

	//output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);

	//write byte code to file
	String classFileName = "bin/" + ((Program) program).getName() + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	show("wrote classfile to " + classFileName);

	// directly execute bytecode
	String[] args = new String[]{"true", "false"}; //create String[] array to initialize params
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	instance.run();
	}

	@Test
	public void ifStatement0() throws Exception {
	String name = "ifStatement0";
	String _input = name + " boolean b1, boolean b2 {integer i1";
	String input = _input + " if (b1 < b2) {i1 <- 200;}}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show("\n\n" + program);

	//generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);

	//output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);

	//write byte code to file
	String classFileName = "bin/" + ((Program) program).getName() + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	show("wrote classfile to " + classFileName);

	// directly execute bytecode
	String[] args = new String[]{"false", "true"}; //create String[] array to initialize params
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	instance.run();
	}

	@Test
	public void ifStatement1() throws Exception {
	String name = "ifStatement1";
	String _input = name + " integer i1, integer i2 {integer i3";
	String input = _input + " if ((i1+i2) >= i2*2) {i3 <- i1+i2; i2 <- (i2*10 + i1/5) - i2*2;}}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show("\n\n" + program);

	//generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);

	//output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);

	//write byte code to file
	String classFileName = "bin/" + ((Program) program).getName() + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	show("wrote classfile to " + classFileName);

	// directly execute bytecode
	String[] args = new String[]{"125", "25"}; //create String[] array to initialize params
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	instance.run();
	}

	@Test
	public void ifStatement2() throws Exception {
	String name = "ifStatement2";
	String _input = name + " integer i1, integer i2, integer i4 {\n integer i3";
	_input = _input + " \nif ((i1+i2) >= i2*2) {\n integer i4 \n i3 <- i1+i2;";
	String input = _input + " \n i4 <- (i2*10 + i1/5) - i2*2;} \n i4 <- i4 - 10;}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show("\n\n" + program);

	//generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);

	//output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);

	//write byte code to file
	String classFileName = "bin/" + ((Program) program).getName() + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	show("wrote classfile to " + classFileName);

	// directly execute bytecode
	String[] args = new String[]{"125", "25", "100"}; //create String[] array to initialize params
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	instance.run();
	}

	@Test
	public void whileStatement0() throws Exception {
	String name = "whileStatement0";
	String _input = name + " integer i1, integer i2 {integer i3";
	String input = _input + " while (i1 < i2) {i3 <- i1+i2; i1 <- i1+1;}}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show("\n\n" + program);

	//generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);

	//output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);

	//write byte code to file
	String classFileName = "bin/" + ((Program) program).getName() + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	show("wrote classfile to " + classFileName);

	// directly execute bytecode
	String[] args = new String[]{"0", "10"}; //create String[] array to initialize params
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	instance.run();
	}

	@Test
	public void whileStatement1() throws Exception {
	String name = "whileStatement1";
	String _input = name + " integer i1, integer i2 {integer i3 i3 <- 0;";
	String input = _input + " while (i1 >= i2) {i3 <- i3+10; i1 <- i1-1;}}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show("\n\n" + program);

	//generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);

	//output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);

	//write byte code to file
	String classFileName = "bin/" + ((Program) program).getName() + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	show("wrote classfile to " + classFileName);

	// directly execute bytecode
	String[] args = new String[]{"10", "0"}; //create String[] array to initialize params
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	instance.run();
	}

	@Test
	public void whileStatement2() throws Exception {
	String name = "whileStatement2";
	String _input = name + " integer i1, integer i2 {integer i3 i3 <- 0;";
	String input = _input + " while (i1 > i2) {i3 <- (i3+10)*i2; i1 <- i1-1;}}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show("\n\n" + program);

	//generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);

	//output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);

	//write byte code to file
	String classFileName = "bin/" + ((Program) program).getName() + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	show("wrote classfile to " + classFileName);

	// directly execute bytecode
	String[] args = new String[]{"10", "5"}; //create String[] array to initialize params
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	instance.run();
	}

	@Test
	public void whileIfStatement0() throws Exception {
	String name = "whileIfStatement6";
	String _input = name + " integer i1, integer i2 {\n integer i3 \n i3 <- 0;";
	_input = _input + " \n while (i1 > i2) {\n i3 <- (i3+10*i1)/i2;\n i1 <- i1-1;";
	String input = _input + " \n if (i1 > 10) {\n i1 <- i1/2;}}}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show("\n\n" + program);

	//generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);

	//output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);

	//write byte code to file
	String classFileName = "bin/" + ((Program) program).getName() + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	show("wrote classfile to " + classFileName);

	// directly execute bytecode
	String[] args = new String[]{"50", "5"}; //create String[] array to initialize params
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	instance.run();
	}
	 @Test
     public void testSimple() throws Exception {
             //scan, parse, and type check the program
             String progname = "testSimple";
             String input = progname + " {integer a integer b b<-10; a<-b;}";
             Scanner scanner = new Scanner(input);
             scanner.scan();
             Parser parser = new Parser(scanner);
             ASTNode program = parser.parse();
             TypeCheckVisitor v = new TypeCheckVisitor();
             program.visit(v, null);
             show(program);

             //generate code
             CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
             byte[] bytecode = (byte[]) program.visit(cv, null);

             //output the generated bytecode
             CodeGenUtils.dumpBytecode(bytecode);

             //write byte code to file
             String name = ((Program) program).getName();
             String classFileName = "bin/" + name + ".class";
             OutputStream output = new FileOutputStream(classFileName);
             output.write(bytecode);
             output.close();
             System.out.println("wrote classfile to " + classFileName);

             // directly execute bytecode
             String[] args = new String[0]; //create command line argument array to initialize params, none in this case
             //args[0] = "5";
             Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
             instance.run();
     }


	/* @Test
	public void testBinaryChain04() throws Exception{
	String input = "p file ident_file , url ident_url {frame ident_frame image ident_img ident_url -> ident_img -> ident_file \n;}";
	Scanner scanner = new Scanner(input);
            scanner.scan();
            Parser parser = new Parser(scanner);
            ASTNode program = parser.parse();
            TypeCheckVisitor v = new TypeCheckVisitor();
            program.visit(v, null);
            show(program);

            //generate code
            CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
            byte[] bytecode = (byte[]) program.visit(cv, null);

            //output the generated bytecode
            CodeGenUtils.dumpBytecode(bytecode);

            //write byte code to file
            String name = ((Program) program).getName();
            String classFileName = "bin/" + name + ".class";
            OutputStream output = new FileOutputStream(classFileName);
            output.write(bytecode);
            output.close();
            System.out.println("wrote classfile to " + classFileName);

            // directly execute bytecode
            String[] args = new String[0]; //create command line argument array to initialize params, none in this case
            //args[0] = "5";
            Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
            instance.run();
	}*/

     @Test
     public void testSimple2() throws Exception {
             //scan, parse, and type check the program
             String progname = "testSimple1";
             String input = progname + " {boolean a boolean b b<-true; a<-b;}";
             Scanner scanner = new Scanner(input);
             scanner.scan();
             Parser parser = new Parser(scanner);
             ASTNode program = parser.parse();
             TypeCheckVisitor v = new TypeCheckVisitor();
             program.visit(v, null);
             show(program);

             //generate code
             CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
             byte[] bytecode = (byte[]) program.visit(cv, null);

             //output the generated bytecode
             CodeGenUtils.dumpBytecode(bytecode);

             //write byte code to file
             String name = ((Program) program).getName();
             String classFileName = "bin/" + name + ".class";
             OutputStream output = new FileOutputStream(classFileName);
             output.write(bytecode);
             output.close();
             System.out.println("wrote classfile to " + classFileName);

             // directly execute bytecode
             String[] args = new String[0]; //create command line argument array to initialize params, none in this case
             Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
             instance.run();
     }


     @Test
     public void testIfTrue() throws Exception {
             //scan, parse, and type check the program
             String progname = "testSimple2";
             String input = progname + " {boolean a boolean b if(true) {b<-true;}}";
             Scanner scanner = new Scanner(input);
             scanner.scan();
             Parser parser = new Parser(scanner);
             ASTNode program = parser.parse();
             TypeCheckVisitor v = new TypeCheckVisitor();
             program.visit(v, null);
             show(program);

             //generate code
             CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
             byte[] bytecode = (byte[]) program.visit(cv, null);

             //output the generated bytecode
             CodeGenUtils.dumpBytecode(bytecode);

             //write byte code to file
             String name = ((Program) program).getName();
             String classFileName = "bin/" + name + ".class";
             OutputStream output = new FileOutputStream(classFileName);
             output.write(bytecode);
             output.close();
             System.out.println("wrote classfile to " + classFileName);

             // directly execute bytecode
             String[] args = new String[0]; //create command line argument array to initialize params, none in this case
             Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
             instance.run();
     }

     @Test
     public void testIfTrueBinaryPlus() throws Exception {
             //scan, parse, and type check the program
             String progname = "testSimple3";
             String input = progname + " {integer a boolean b if(true) {a<-4+5;}}";
             Scanner scanner = new Scanner(input);
             scanner.scan();
             Parser parser = new Parser(scanner);
             ASTNode program = parser.parse();
             TypeCheckVisitor v = new TypeCheckVisitor();
             program.visit(v, null);
             show(program);

             //generate code
             CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
             byte[] bytecode = (byte[]) program.visit(cv, null);

             //output the generated bytecode
             CodeGenUtils.dumpBytecode(bytecode);

             //write byte code to file
             String name = ((Program) program).getName();
             String classFileName = "bin/" + name + ".class";
             OutputStream output = new FileOutputStream(classFileName);
             output.write(bytecode);
             output.close();
             System.out.println("wrote classfile to " + classFileName);

             // directly execute bytecode
             String[] args = new String[0]; //create command line argument array to initialize params, none in this case
             Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
             instance.run();
     }

     @Test
     public void testIfTrueBinaryMinus() throws Exception {
             //scan, parse, and type check the program
             String progname = "testSimple4";
             String input = progname + " {integer a boolean b if(true) {a<-4-5;}}";
             Scanner scanner = new Scanner(input);
             scanner.scan();
             Parser parser = new Parser(scanner);
             ASTNode program = parser.parse();
             TypeCheckVisitor v = new TypeCheckVisitor();
             program.visit(v, null);
             show(program);

             //generate code
             CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
             byte[] bytecode = (byte[]) program.visit(cv, null);

             //output the generated bytecode
             CodeGenUtils.dumpBytecode(bytecode);

             //write byte code to file
             String name = ((Program) program).getName();
             String classFileName = "bin/" + name + ".class";
             OutputStream output = new FileOutputStream(classFileName);
             output.write(bytecode);
             output.close();
             System.out.println("wrote classfile to " + classFileName);

             // directly execute bytecode
             String[] args = new String[0]; //create command line argument array to initialize params, none in this case
             Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
             instance.run();
     }

     @Test
     public void testIfTrueBinaryMul() throws Exception {
             //scan, parse, and type check the program
             String progname = "testSimple5";
             String input = progname + " {integer a boolean b if(true) {a<-4*5;}}";
             Scanner scanner = new Scanner(input);
             scanner.scan();
             Parser parser = new Parser(scanner);
             ASTNode program = parser.parse();
             TypeCheckVisitor v = new TypeCheckVisitor();
             program.visit(v, null);
             show(program);

             //generate code
             CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
             byte[] bytecode = (byte[]) program.visit(cv, null);

             //output the generated bytecode
             CodeGenUtils.dumpBytecode(bytecode);

             //write byte code to file
             String name = ((Program) program).getName();
             String classFileName = "bin/" + name + ".class";
             OutputStream output = new FileOutputStream(classFileName);
             output.write(bytecode);
             output.close();
             System.out.println("wrote classfile to " + classFileName);

             // directly execute bytecode
             String[] args = new String[0]; //create command line argument array to initialize params, none in this case
             Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
             instance.run();
     }

     @Test
     public void testIfTrueBinaryDiv() throws Exception {
             //scan, parse, and type check the program
             String progname = "testSimple6";
             String input = progname + " {integer a boolean b if(true) {a<-10/2;}}";
             Scanner scanner = new Scanner(input);
             scanner.scan();
             Parser parser = new Parser(scanner);
             ASTNode program = parser.parse();
             TypeCheckVisitor v = new TypeCheckVisitor();
             program.visit(v, null);
             show(program);

             //generate code
             CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
             byte[] bytecode = (byte[]) program.visit(cv, null);

             //output the generated bytecode
             CodeGenUtils.dumpBytecode(bytecode);

             //write byte code to file
             String name = ((Program) program).getName();
             String classFileName = "bin/" + name + ".class";
             OutputStream output = new FileOutputStream(classFileName);
             output.write(bytecode);
             output.close();
             System.out.println("wrote classfile to " + classFileName);

             // directly execute bytecode
             String[] args = new String[0]; //create command line argument array to initialize params, none in this case
             Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
             instance.run();
     }

     @Test
     public void testIfFalse() throws Exception {
             //scan, parse, and type check the program
             String progname = "testSimple7";
             String input = progname + " {boolean a boolean b if(false) {b<-true;}}";
             Scanner scanner = new Scanner(input);
             scanner.scan();
             Parser parser = new Parser(scanner);
             ASTNode program = parser.parse();
             TypeCheckVisitor v = new TypeCheckVisitor();
             program.visit(v, null);
             show(program);

             //generate code
             CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
             byte[] bytecode = (byte[]) program.visit(cv, null);

             //output the generated bytecode
             CodeGenUtils.dumpBytecode(bytecode);

             //write byte code to file
             String name = ((Program) program).getName();
             String classFileName = "bin/" + name + ".class";
             OutputStream output = new FileOutputStream(classFileName);
             output.write(bytecode);
             output.close();
             System.out.println("wrote classfile to " + classFileName);

             // directly execute bytecode
             String[] args = new String[0]; //create command line argument array to initialize params, none in this case
             Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
             instance.run();
     }


     @Test
     public void testIfByIdentLit() throws Exception {
             //scan, parse, and type check the program
             String progname = "testSimple8";
             String input = progname + " {boolean a boolean b b<-true; if(b) {a<-true;}}";
             Scanner scanner = new Scanner(input);
             scanner.scan();
             Parser parser = new Parser(scanner);
             ASTNode program = parser.parse();
             TypeCheckVisitor v = new TypeCheckVisitor();
             program.visit(v, null);
             show(program);

             //generate code
             CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
             byte[] bytecode = (byte[]) program.visit(cv, null);

             //output the generated bytecode
             CodeGenUtils.dumpBytecode(bytecode);

             //write byte code to file
             String name = ((Program) program).getName();
             String classFileName = "bin/" + name + ".class";
             OutputStream output = new FileOutputStream(classFileName);
             output.write(bytecode);
             output.close();
             System.out.println("wrote classfile to " + classFileName);

             // directly execute bytecode
             String[] args = new String[0]; //create command line argument array to initialize params, none in this case
             Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
             instance.run();
     }



     public void testIfErrorUndefined() throws Exception {
             //scan, parse, and type check the program
             String progname = "testSimple9";
             String input = progname + " {boolean a boolean b if(b) {a<-true;}}";
             Scanner scanner = new Scanner(input);
             scanner.scan();
             Parser parser = new Parser(scanner);
             ASTNode program = parser.parse();
             TypeCheckVisitor v = new TypeCheckVisitor();
             program.visit(v, null);
             show(program);

             //generate code
             CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
             byte[] bytecode = (byte[]) program.visit(cv, null);

             //output the generated bytecode
             CodeGenUtils.dumpBytecode(bytecode);

             //write byte code to file
             String name = ((Program) program).getName();
             String classFileName = "bin/" + name + ".class";
             OutputStream output = new FileOutputStream(classFileName);
             output.write(bytecode);
             output.close();
             System.out.println("wrote classfile to " + classFileName);

             // directly execute bytecode
             String[] args = new String[0]; //create command line argument array to initialize params, none in this case
             Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
             instance.run();
     }

     @Test
     public void testIfBinaryLE() throws Exception {
             //scan, parse, and type check the program
             String progname = "testSimple10";
             String input = progname + " {boolean a boolean b b<-true; if(3<=3) {a<-true;}}";
             Scanner scanner = new Scanner(input);
             scanner.scan();
             Parser parser = new Parser(scanner);
             ASTNode program = parser.parse();
             TypeCheckVisitor v = new TypeCheckVisitor();
             program.visit(v, null);
             show(program);

             //generate code
             CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
             byte[] bytecode = (byte[]) program.visit(cv, null);

             //output the generated bytecode
             CodeGenUtils.dumpBytecode(bytecode);

             //write byte code to file
             String name = ((Program) program).getName();
             String classFileName = "bin/" + name + ".class";
             OutputStream output = new FileOutputStream(classFileName);
             output.write(bytecode);
             output.close();
             System.out.println("wrote classfile to " + classFileName);

             // directly execute bytecode
             String[] args = new String[0]; //create command line argument array to initialize params, none in this case
             Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
             instance.run();
     }

     @Test
     public void testIfBinaryLT() throws Exception {
             //scan, parse, and type check the program
             String progname = "testSimple11";
             String input = progname + " {boolean a boolean b b<-true; if(3<10) {a<-true;}}";
             Scanner scanner = new Scanner(input);
             scanner.scan();
             Parser parser = new Parser(scanner);
             ASTNode program = parser.parse();
             TypeCheckVisitor v = new TypeCheckVisitor();
             program.visit(v, null);
             show(program);

             //generate code
             CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
             byte[] bytecode = (byte[]) program.visit(cv, null);

             //output the generated bytecode
             CodeGenUtils.dumpBytecode(bytecode);

             //write byte code to file
             String name = ((Program) program).getName();
             String classFileName = "bin/" + name + ".class";
             OutputStream output = new FileOutputStream(classFileName);
             output.write(bytecode);
             output.close();
             System.out.println("wrote classfile to " + classFileName);

             // directly execute bytecode
             String[] args = new String[0]; //create command line argument array to initialize params, none in this case
             Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
             instance.run();
     }

     @Test
     public void testIfBinaryGE() throws Exception {
             //scan, parse, and type check the program
             String progname = "testSimple12";
             String input = progname + " {boolean a boolean b b<-true; if(10>=10) {a<-true;}}";
             Scanner scanner = new Scanner(input);
             scanner.scan();
             Parser parser = new Parser(scanner);
             ASTNode program = parser.parse();
             TypeCheckVisitor v = new TypeCheckVisitor();
             program.visit(v, null);
             show(program);

             //generate code
             CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
             byte[] bytecode = (byte[]) program.visit(cv, null);

             //output the generated bytecode
             CodeGenUtils.dumpBytecode(bytecode);

             //write byte code to file
             String name = ((Program) program).getName();
             String classFileName = "bin/" + name + ".class";
             OutputStream output = new FileOutputStream(classFileName);
             output.write(bytecode);
             output.close();
             System.out.println("wrote classfile to " + classFileName);

             // directly execute bytecode
             String[] args = new String[0]; //create command line argument array to initialize params, none in this case
             Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
             instance.run();
     }

     @Test
     public void testIfBinaryGT() throws Exception {
             //scan, parse, and type check the program
             String progname = "testSimple13";
             String input = progname + " {boolean a boolean b b<-true; if(10>9) {a<-true;}}";
             Scanner scanner = new Scanner(input);
             scanner.scan();
             Parser parser = new Parser(scanner);
             ASTNode program = parser.parse();
             TypeCheckVisitor v = new TypeCheckVisitor();
             program.visit(v, null);
             show(program);

             //generate code
             CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
             byte[] bytecode = (byte[]) program.visit(cv, null);

             //output the generated bytecode
             CodeGenUtils.dumpBytecode(bytecode);

             //write byte code to file
             String name = ((Program) program).getName();
             String classFileName = "bin/" + name + ".class";
             OutputStream output = new FileOutputStream(classFileName);
             output.write(bytecode);
             output.close();
             System.out.println("wrote classfile to " + classFileName);

             // directly execute bytecode
             String[] args = new String[0]; //create command line argument array to initialize params, none in this case
             Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
             instance.run();
     }

     @Test
     public void testWhileTrue() throws Exception {
             //scan, parse, and type check the program
             String progname = "testSimple14";
             String input = progname + " {boolean a boolean b b<-true; while(b) {a<-true; b<-false;}}";
             Scanner scanner = new Scanner(input);
             scanner.scan();
             Parser parser = new Parser(scanner);
             ASTNode program = parser.parse();
             TypeCheckVisitor v = new TypeCheckVisitor();
             program.visit(v, null);
             show(program);

             //generate code
             CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
             byte[] bytecode = (byte[]) program.visit(cv, null);

             //output the generated bytecode
             CodeGenUtils.dumpBytecode(bytecode);

             //write byte code to file
             String name = ((Program) program).getName();
             String classFileName = "bin/" + name + ".class";
             OutputStream output = new FileOutputStream(classFileName);
             output.write(bytecode);
             output.close();
             System.out.println("wrote classfile to " + classFileName);

             // directly execute bytecode
             String[] args = new String[0]; //create command line argument array to initialize params, none in this case
             Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
             instance.run();
     }

     @Test
     public void testWhileWithBinaryGT() throws Exception {
             //scan, parse, and type check the program
             String progname = "testSimple15";
             String input = progname + " {integer a boolean b a<-5; while(a>3) { a<- a-1;}}";
             Scanner scanner = new Scanner(input);
             scanner.scan();
             Parser parser = new Parser(scanner);
             ASTNode program = parser.parse();
             TypeCheckVisitor v = new TypeCheckVisitor();
             program.visit(v, null);
             show(program);

             //generate code
             CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
             byte[] bytecode = (byte[]) program.visit(cv, null);

             //output the generated bytecode
             CodeGenUtils.dumpBytecode(bytecode);

             //write byte code to file
             String name = ((Program) program).getName();
             String classFileName = "bin/" + name + ".class";
             OutputStream output = new FileOutputStream(classFileName);
             output.write(bytecode);
             output.close();
             System.out.println("wrote classfile to " + classFileName);

             // directly execute bytecode
             String[] args = new String[0]; //create command line argument array to initialize params, none in this case
             Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
             instance.run();
     }

     @Test
     public void testWhileWithBinaryGE() throws Exception {
             //scan, parse, and type check the program
             String progname = "testSimple16";
             String input = progname + " {integer a boolean b a<-5; while(a>=3) { a<- a-1;}}";
             Scanner scanner = new Scanner(input);
             scanner.scan();
             Parser parser = new Parser(scanner);
             ASTNode program = parser.parse();
             TypeCheckVisitor v = new TypeCheckVisitor();
             program.visit(v, null);
             show(program);

             //generate code
             CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
             byte[] bytecode = (byte[]) program.visit(cv, null);

             //output the generated bytecode
             CodeGenUtils.dumpBytecode(bytecode);

             //write byte code to file
             String name = ((Program) program).getName();
             String classFileName = "bin/" + name + ".class";
             OutputStream output = new FileOutputStream(classFileName);
             output.write(bytecode);
             output.close();
             System.out.println("wrote classfile to " + classFileName);

             // directly execute bytecode
             String[] args = new String[0]; //create command line argument array to initialize params, none in this case
             Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
             instance.run();
     }

     @Test
     public void testWhileWithBinaryLE() throws Exception {
             //scan, parse, and type check the program
             String progname = "testSimple17";
             String input = progname + " {integer a integer b a<-5; b<-1; while(a<=8) { a<- a+b;}}";
             Scanner scanner = new Scanner(input);
             scanner.scan();
             Parser parser = new Parser(scanner);
             ASTNode program = parser.parse();
             TypeCheckVisitor v = new TypeCheckVisitor();
             program.visit(v, null);
             show(program);

             //generate code
             CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
             byte[] bytecode = (byte[]) program.visit(cv, null);

             //output the generated bytecode
             CodeGenUtils.dumpBytecode(bytecode);

             //write byte code to file
             String name = ((Program) program).getName();
             String classFileName = "bin/" + name + ".class";
             OutputStream output = new FileOutputStream(classFileName);
             output.write(bytecode);
             output.close();
             System.out.println("wrote classfile to " + classFileName);

             // directly execute bytecode
             String[] args = new String[0]; //create command line argument array to initialize params, none in this case
             Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
             instance.run();
     }

     @Test
     public void testWhileWithBinaryLT() throws Exception {
             //scan, parse, and type check the program
             String progname = "testSimple18";
             String input = progname + " {integer a integer b a<-5; b<-1; while(a<8) { a<- a+b;}}";
             Scanner scanner = new Scanner(input);
             scanner.scan();
             Parser parser = new Parser(scanner);
             ASTNode program = parser.parse();
             TypeCheckVisitor v = new TypeCheckVisitor();
             program.visit(v, null);
             show(program);

             //generate code
             CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
             byte[] bytecode = (byte[]) program.visit(cv, null);

             //output the generated bytecode
             CodeGenUtils.dumpBytecode(bytecode);

             //write byte code to file
             String name = ((Program) program).getName();
             String classFileName = "bin/" + name + ".class";
             OutputStream output = new FileOutputStream(classFileName);
             output.write(bytecode);
             output.close();
             System.out.println("wrote classfile to " + classFileName);

             // directly execute bytecode
             String[] args = new String[0]; //create command line argument array to initialize params, none in this case
             Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
             instance.run();
     }

     @Test
     public void testIfBinaryLEIntLitCondition() throws Exception {
             //scan, parse, and type check the program
             String progname = "testSimple19";
             String input = progname + " {boolean a integer b integer c c<-6; b<-6; if(c<=b) {a<-true;}}";
             Scanner scanner = new Scanner(input);
             scanner.scan();
             Parser parser = new Parser(scanner);
             ASTNode program = parser.parse();
             TypeCheckVisitor v = new TypeCheckVisitor();
             program.visit(v, null);
             show(program);

             //generate code
             CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
             byte[] bytecode = (byte[]) program.visit(cv, null);

             //output the generated bytecode
             CodeGenUtils.dumpBytecode(bytecode);

             //write byte code to file
             String name = ((Program) program).getName();
             String classFileName = "bin/" + name + ".class";
             OutputStream output = new FileOutputStream(classFileName);
             output.write(bytecode);
             output.close();
             System.out.println("wrote classfile to " + classFileName);

             // directly execute bytecode
             String[] args = new String[0]; //create command line argument array to initialize params, none in this case
             Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
             instance.run();
     }


    	 @Test
         public void subImage() throws Exception {
                 //scan, parse, and type check the program
                // String progname = "testSimple20";
                 String input = "subImage url u {image i image j image k frame f \nu -> i; \nu -> j; \n k <- i-j; k -> f -> show;\n}";
                 Scanner scanner = new Scanner(input);
                 scanner.scan();
                 Parser parser = new Parser(scanner);
                 ASTNode program = parser.parse();
                 TypeCheckVisitor v = new TypeCheckVisitor();
                 program.visit(v, null);
                 show(program);

                 //generate code
                 CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
                 byte[] bytecode = (byte[]) program.visit(cv, null);

                 //output the generated bytecode
                 CodeGenUtils.dumpBytecode(bytecode);

                 //write byte code to file
                 String name = ((Program) program).getName();
                 String classFileName = "bin/" + name + ".class";
                 OutputStream output = new FileOutputStream(classFileName);
                 output.write(bytecode);
                 output.close();
                 System.out.println("wrote classfile to " + classFileName);

                 // directly execute bytecode
                // String[] args = new String[1]; //create command line argument array to initialize params, none in this case
                 //args[0] = "http://www.rd.com/wp-content/uploads/sites/2/2016/04/01-cat-wants-to-tell-you-laptop.jpg";
                 String[] args = new String[]{"https://s-media-cache-ak0.pinimg.com/736x/3c/90/c2/3c90c2c8621dd72a7dbedaec431e8be7.jpg", "5"}; //create String[] array to initialize params
         	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
                 //Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
                 instance.run();
         }



    	 @Test
         public void readFromURLandWriteToFile2() throws Exception {
                 //scan, parse, and type check the program
                // String progname = "testSimple20";
                 String input ="readFromURLandWriteToFile2 url u, \nfile out \n{image i frame f \nu -> gray  -> i;\n i -> f -> show; i -> out; \n \n}";
                 Scanner scanner = new Scanner(input);
                 scanner.scan();
                 Parser parser = new Parser(scanner);
                 ASTNode program = parser.parse();
                 TypeCheckVisitor v = new TypeCheckVisitor();
                 program.visit(v, null);
                 show(program);

                 //generate code
                 CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
                 byte[] bytecode = (byte[]) program.visit(cv, null);

                 //output the generated bytecode
                 CodeGenUtils.dumpBytecode(bytecode);

                 //write byte code to file
                 String name = ((Program) program).getName();
                 String classFileName = "bin/" + name + ".class";
                 OutputStream output = new FileOutputStream(classFileName);
                 output.write(bytecode);
                 output.close();
                 System.out.println("wrote classfile to " + classFileName);

                 // directly execute bytecode
                // String[] args = new String[1]; //create command line argument array to initialize params, none in this case
                 //args[0] = "http://www.rd.com/wp-content/uploads/sites/2/2016/04/01-cat-wants-to-tell-you-laptop.jpg";
                 String[] args = new String[]{"https://s-media-cache-ak0.pinimg.com/736x/3c/90/c2/3c90c2c8621dd72a7dbedaec431e8be7.jpg", "test.jpg"}; //create String[] array to initialize params
         	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
                 //Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
                 instance.run();
         }


       	 @Test
         public void readFromURLandWriteToFile3() throws Exception {
                 //scan, parse, and type check the program
                // String progname = "testSimple20";
                 String input = "readFromURLandWriteToFile3 url u, \nfile out \n{\nu -> gray  -> out;\n}";
                 Scanner scanner = new Scanner(input);
                 scanner.scan();
                 Parser parser = new Parser(scanner);
                 ASTNode program = parser.parse();
                 TypeCheckVisitor v = new TypeCheckVisitor();
                 program.visit(v, null);
                 show(program);

                 //generate code
                 CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
                 byte[] bytecode = (byte[]) program.visit(cv, null);

                 //output the generated bytecode
                 CodeGenUtils.dumpBytecode(bytecode);

                 //write byte code to file
                 String name = ((Program) program).getName();
                 String classFileName = "bin/" + name + ".class";
                 OutputStream output = new FileOutputStream(classFileName);
                 output.write(bytecode);
                 output.close();
                 System.out.println("wrote classfile to " + classFileName);

                 // directly execute bytecode
                // String[] args = new String[1]; //create command line argument array to initialize params, none in this case
                 //args[0] = "http://www.rd.com/wp-content/uploads/sites/2/2016/04/01-cat-wants-to-tell-you-laptop.jpg";
                 String[] args = new String[]{"https://s-media-cache-ak0.pinimg.com/736x/3c/90/c2/3c90c2c8621dd72a7dbedaec431e8be7.jpg", "test1.jpg"}; //create String[] array to initialize params
         	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
                 //Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
                 instance.run();
         }




       	 @Test
         public void sleepImg() throws Exception {
                 //scan, parse, and type check the program
                // String progname = "testSimple20";
                 String input = "sleepImg url u {image i frame f \nu -> i -> convolve -> f -> show;sleep 5;integer j j <- 42;\n}";
                 Scanner scanner = new Scanner(input);
                 scanner.scan();
                 Parser parser = new Parser(scanner);
                 ASTNode program = parser.parse();
                 TypeCheckVisitor v = new TypeCheckVisitor();
                 program.visit(v, null);
                 show(program);

                 //generate code
                 CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
                 byte[] bytecode = (byte[]) program.visit(cv, null);

                 //output the generated bytecode
                 CodeGenUtils.dumpBytecode(bytecode);

                 //write byte code to file
                 String name = ((Program) program).getName();
                 String classFileName = "bin/" + name + ".class";
                 OutputStream output = new FileOutputStream(classFileName);
                 output.write(bytecode);
                 output.close();
                 System.out.println("wrote classfile to " + classFileName);

                 // directly execute bytecode
                // String[] args = new String[1]; //create command line argument array to initialize params, none in this case
                 //args[0] = "http://www.rd.com/wp-content/uploads/sites/2/2016/04/01-cat-wants-to-tell-you-laptop.jpg";
                 String[] args = new String[]{"https://s-media-cache-ak0.pinimg.com/736x/3c/90/c2/3c90c2c8621dd72a7dbedaec431e8be7.jpg", "sleep.jpg"}; //create String[] array to initialize params
         	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
                 //Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
                 instance.run();
         }
    //   	/*\n k <- i-j; k -> f -> show;*/addImage url u {image i image j image k frame f \nu -> i; \nu -> j; \n k <- i-j; k -> f -> show;  sleep 5; k <- k + i; k -> f -> show; \n}

       	@Test
        public void addImage() throws Exception {
                //scan, parse, and type check the program
               // String progname = "testSimple20";
                String input = "addImage url u {image i image j image k frame f \nu -> i; \nu -> j; \n k <- i-j; k -> f -> show;  sleep 5;  k <- k + i; k -> f -> show; \n}";
                Scanner scanner = new Scanner(input);
                scanner.scan();
                Parser parser = new Parser(scanner);
                ASTNode program = parser.parse();
                TypeCheckVisitor v = new TypeCheckVisitor();
                program.visit(v, null);
                show(program);

                //generate code
                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
                byte[] bytecode = (byte[]) program.visit(cv, null);

                //output the generated bytecode
                CodeGenUtils.dumpBytecode(bytecode);

                //write byte code to file
                String name = ((Program) program).getName();
                String classFileName = "bin/" + name + ".class";
                OutputStream output = new FileOutputStream(classFileName);
                output.write(bytecode);
                output.close();
                System.out.println("wrote classfile to " + classFileName);

                // directly execute bytecode
               // String[] args = new String[1]; //create command line argument array to initialize params, none in this case
                //args[0] = "http://www.rd.com/wp-content/uploads/sites/2/2016/04/01-cat-wants-to-tell-you-laptop.jpg";
                String[] args = new String[]{"https://s-media-cache-ak0.pinimg.com/736x/3c/90/c2/3c90c2c8621dd72a7dbedaec431e8be7.jpg", "sleep.jpg"}; //create String[] array to initialize params
        	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
                //Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
                instance.run();
        }

       	@Test
        public void booleanComp1() throws Exception {
                //scan, parse, and type check the program
               // String progname = "testSimple20";
                String input = "booleanComp1 { boolean x  x<- true == false;boolean y  y<- true != false;boolean z  z<- true | false;z<- x|y;z<- x&y;}";
                Scanner scanner = new Scanner(input);
                scanner.scan();
                Parser parser = new Parser(scanner);
                ASTNode program = parser.parse();
                TypeCheckVisitor v = new TypeCheckVisitor();
                program.visit(v, null);
                show(program);

                //generate code
                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
                byte[] bytecode = (byte[]) program.visit(cv, null);

                //output the generated bytecode
                CodeGenUtils.dumpBytecode(bytecode);

                //write byte code to file
                String name = ((Program) program).getName();
                String classFileName = "bin/" + name + ".class";
                OutputStream output = new FileOutputStream(classFileName);
                output.write(bytecode);
                output.close();
                System.out.println("wrote classfile to " + classFileName);

                // directly execute bytecode
               // String[] args = new String[1]; //create command line argument array to initialize params, none in this case
                //args[0] = "http://www.rd.com/wp-content/uploads/sites/2/2016/04/01-cat-wants-to-tell-you-laptop.jpg";
                String[] args = new String[]{"https://s-media-cache-ak0.pinimg.com/736x/3c/90/c2/3c90c2c8621dd72a7dbedaec431e8be7.jpg", "sleep.jpg"}; //create String[] array to initialize params
        	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
                //Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
                instance.run();
        }
       	@Test
        public void booleanComp2() throws Exception {
                //scan, parse, and type check the program
               // String progname = "testSimple20";
                String input = "booleanComp2 { boolean x  x<- true;boolean y  y<- false;boolean z  z<- true < false;integer a  a<- 4;integer b  b<- 6;z<- ((a<b) | x) & y;z<- (a<b) | (x & y);} ";
                Scanner scanner = new Scanner(input);
                scanner.scan();
                Parser parser = new Parser(scanner);
                ASTNode program = parser.parse();
                TypeCheckVisitor v = new TypeCheckVisitor();
                program.visit(v, null);
                show(program);

                //generate code
                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
                byte[] bytecode = (byte[]) program.visit(cv, null);

                //output the generated bytecode
                CodeGenUtils.dumpBytecode(bytecode);

                //write byte code to file
                String name = ((Program) program).getName();
                String classFileName = "bin/" + name + ".class";
                OutputStream output = new FileOutputStream(classFileName);
                output.write(bytecode);
                output.close();
                System.out.println("wrote classfile to " + classFileName);

                // directly execute bytecode
               // String[] args = new String[1]; //create command line argument array to initialize params, none in this case
                //args[0] = "http://www.rd.com/wp-content/uploads/sites/2/2016/04/01-cat-wants-to-tell-you-laptop.jpg";
                String[] args = new String[]{"https://s-media-cache-ak0.pinimg.com/736x/3c/90/c2/3c90c2c8621dd72a7dbedaec431e8be7.jpg", "sleep.jpg"}; //create String[] array to initialize params
        	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
                //Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
                instance.run();
        }

    	@Test
        public void convolveImg() throws Exception {
                //scan, parse, and type check the program
               // String progname = "testSimple20";
                String input = "convolveImg url u {image i frame f \nu -> i -> convolve -> f -> show;\n}";
                Scanner scanner = new Scanner(input);
                scanner.scan();
                Parser parser = new Parser(scanner);
                ASTNode program = parser.parse();
                TypeCheckVisitor v = new TypeCheckVisitor();
                program.visit(v, null);
                show(program);

                //generate code
                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
                byte[] bytecode = (byte[]) program.visit(cv, null);

                //output the generated bytecode
                CodeGenUtils.dumpBytecode(bytecode);

                //write byte code to file
                String name = ((Program) program).getName();
                String classFileName = "bin/" + name + ".class";
                OutputStream output = new FileOutputStream(classFileName);
                output.write(bytecode);
                output.close();
                System.out.println("wrote classfile to " + classFileName);

                // directly execute bytecode
               // String[] args = new String[1]; //create command line argument array to initialize params, none in this case
                //args[0] = "http://www.rd.com/wp-content/uploads/sites/2/2016/04/01-cat-wants-to-tell-you-laptop.jpg";
                String[] args = new String[]{"https://s-media-cache-ak0.pinimg.com/736x/3c/90/c2/3c90c2c8621dd72a7dbedaec431e8be7.jpg", "sleep.jpg"}; //create String[] array to initialize params
        	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
                //Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
                instance.run();
        }
    	@Test
        public void readFromURLandDisplay() throws Exception {
                //scan, parse, and type check the program
               // String progname = "testSimple20";
                String input = "readFromURLandDisplay url u {image i frame f \nu -> i;i -> f -> show;\n}";
                Scanner scanner = new Scanner(input);
                scanner.scan();
                Parser parser = new Parser(scanner);
                ASTNode program = parser.parse();
                TypeCheckVisitor v = new TypeCheckVisitor();
                program.visit(v, null);
                show(program);

                //generate code
                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
                byte[] bytecode = (byte[]) program.visit(cv, null);

                //output the generated bytecode
                CodeGenUtils.dumpBytecode(bytecode);

                //write byte code to file
                String name = ((Program) program).getName();
                String classFileName = "bin/" + name + ".class";
                OutputStream output = new FileOutputStream(classFileName);
                output.write(bytecode);
                output.close();
                System.out.println("wrote classfile to " + classFileName);

                // directly execute bytecode
               // String[] args = new String[1]; //create command line argument array to initialize params, none in this case
                //args[0] = "http://www.rd.com/wp-content/uploads/sites/2/2016/04/01-cat-wants-to-tell-you-laptop.jpg";
                String[] args = new String[]{"https://s-media-cache-ak0.pinimg.com/736x/3c/90/c2/3c90c2c8621dd72a7dbedaec431e8be7.jpg", "sleep.jpg"}; //create String[] array to initialize params
        	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
                //Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
                instance.run();
        }
    	@Test
        public void imgMove2() throws Exception {
                //scan, parse, and type check the program
               // String progname = "testSimple20";
                String input = "imgMove2 url u {image i frame f \nu -> i;i -> f -> show; \nsleep 5; \ninteger x \ninteger y \nx <- screenwidth;\ny <-  screenheight; \nf -> move (x*3/4,y/4) -> show;\n}";
                Scanner scanner = new Scanner(input);
                scanner.scan();
                Parser parser = new Parser(scanner);
                ASTNode program = parser.parse();
                TypeCheckVisitor v = new TypeCheckVisitor();
                program.visit(v, null);
                show(program);

                //generate code
                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
                byte[] bytecode = (byte[]) program.visit(cv, null);

                //output the generated bytecode
                CodeGenUtils.dumpBytecode(bytecode);

                //write byte code to file
                String name = ((Program) program).getName();
                String classFileName = "bin/" + name + ".class";
                OutputStream output = new FileOutputStream(classFileName);
                output.write(bytecode);
                output.close();
                System.out.println("wrote classfile to " + classFileName);

                // directly execute bytecode
               // String[] args = new String[1]; //create command line argument array to initialize params, none in this case
                //args[0] = "http://www.rd.com/wp-content/uploads/sites/2/2016/04/01-cat-wants-to-tell-you-laptop.jpg";
                String[] args = new String[]{"https://s-media-cache-ak0.pinimg.com/736x/3c/90/c2/3c90c2c8621dd72a7dbedaec431e8be7.jpg", "sleep.jpg"}; //create String[] array to initialize params
        	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
                //Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
                instance.run();
        }
    	@Test
        public void subImage2() throws Exception {
                //scan, parse, and type check the program
               // String progname = "testSimple20";
                String input = "subImage2 url u {image i image j  frame f \nu -> i; \nu -> j; \n i <- i-j; i -> f -> show;\n}";
                Scanner scanner = new Scanner(input);
                scanner.scan();
                Parser parser = new Parser(scanner);
                ASTNode program = parser.parse();
                TypeCheckVisitor v = new TypeCheckVisitor();
                program.visit(v, null);
                show(program);

                //generate code
                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
                byte[] bytecode = (byte[]) program.visit(cv, null);

                //output the generated bytecode
                CodeGenUtils.dumpBytecode(bytecode);

                //write byte code to file
                String name = ((Program) program).getName();
                String classFileName = "bin/" + name + ".class";
                OutputStream output = new FileOutputStream(classFileName);
                output.write(bytecode);
                output.close();
                System.out.println("wrote classfile to " + classFileName);

                // directly execute bytecode
               // String[] args = new String[1]; //create command line argument array to initialize params, none in this case
                //args[0] = "http://www.rd.com/wp-content/uploads/sites/2/2016/04/01-cat-wants-to-tell-you-laptop.jpg";
                String[] args = new String[]{"https://s-media-cache-ak0.pinimg.com/736x/3c/90/c2/3c90c2c8621dd72a7dbedaec431e8be7.jpg", "sleep.jpg"}; //create String[] array to initialize params
        	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
                //Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
                instance.run();
        }
    	@Test
        public void booleanBinaryExpression2() throws Exception {
                //scan, parse, and type check the program
               // String progname = "testSimple20";
                String input = "booleanBinaryExpression2 \nboolean  b0, boolean b1{  \n boolean b3 boolean b4 b3 <- b0 & b1; b4 <- b0 | b1;}";
                Scanner scanner = new Scanner(input);
                scanner.scan();
                Parser parser = new Parser(scanner);
                ASTNode program = parser.parse();
                TypeCheckVisitor v = new TypeCheckVisitor();
                program.visit(v, null);
                show(program);

                //generate code
                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
                byte[] bytecode = (byte[]) program.visit(cv, null);

                //output the generated bytecode
                CodeGenUtils.dumpBytecode(bytecode);

                //write byte code to file
                String name = ((Program) program).getName();
                String classFileName = "bin/" + name + ".class";
                OutputStream output = new FileOutputStream(classFileName);
                output.write(bytecode);
                output.close();
                System.out.println("wrote classfile to " + classFileName);

                // directly execute bytecode
               // String[] args = new String[1]; //create command line argument array to initialize params, none in this case
                //args[0] = "http://www.rd.com/wp-content/uploads/sites/2/2016/04/01-cat-wants-to-tell-you-laptop.jpg";
                String[] args = new String[]{"true", "false"}; //create String[] array to initialize params
        	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
                //Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
                instance.run();
        }
    	@Test
        public void booleanBinaryExpression3() throws Exception {
                //scan, parse, booleanBinaryExpression3 type check the program
               // String progname = "testSimple20";
                String input = "booleanBinaryExpression3 \nboolean  b0, boolean b1{  \n boolean b3 boolean b4 b3 <- b0 & b1; b4 <- b0 | b1;}";
                Scanner scanner = new Scanner(input);
                scanner.scan();
                Parser parser = new Parser(scanner);
                ASTNode program = parser.parse();
                TypeCheckVisitor v = new TypeCheckVisitor();
                program.visit(v, null);
                show(program);

                //generate code
                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
                byte[] bytecode = (byte[]) program.visit(cv, null);

                //output the generated bytecode
                CodeGenUtils.dumpBytecode(bytecode);

                //write byte code to file
                String name = ((Program) program).getName();
                String classFileName = "bin/" + name + ".class";
                OutputStream output = new FileOutputStream(classFileName);
                output.write(bytecode);
                output.close();
                System.out.println("wrote classfile to " + classFileName);

                // directly execute bytecode
               // String[] args = new String[1]; //create command line argument array to initialize params, none in this case
                //args[0] = "http://www.rd.com/wp-content/uploads/sites/2/2016/04/01-cat-wants-to-tell-you-laptop.jpg";
                String[] args = new String[]{"true", "true"}; //create String[] array to initialize params
        	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
                //Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
                instance.run();
        }
    	@Test
        public void modImage() throws Exception {
                //scan, parse, and type check the program
               // String progname = "testSimple20";
                String input = "modImage url u {image i image j  frame f \nu -> j; \n i <- j%128; i -> f -> show;\n}";
                Scanner scanner = new Scanner(input);
                scanner.scan();
                Parser parser = new Parser(scanner);
                ASTNode program = parser.parse();
                TypeCheckVisitor v = new TypeCheckVisitor();
                program.visit(v, null);
                show(program);

                //generate code
                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
                byte[] bytecode = (byte[]) program.visit(cv, null);

                //output the generated bytecode
                CodeGenUtils.dumpBytecode(bytecode);

                //write byte code to file
                String name = ((Program) program).getName();
                String classFileName = "bin/" + name + ".class";
                OutputStream output = new FileOutputStream(classFileName);
                output.write(bytecode);
                output.close();
                System.out.println("wrote classfile to " + classFileName);

                // directly execute bytecode
               // String[] args = new String[1]; //create command line argument array to initialize params, none in this case
                //args[0] = "http://www.rd.com/wp-content/uploads/sites/2/2016/04/01-cat-wants-to-tell-you-laptop.jpg";
                String[] args = new String[]{"https://s-media-cache-ak0.pinimg.com/736x/3c/90/c2/3c90c2c8621dd72a7dbedaec431e8be7.jpg", "sleep.jpg"}; //create String[] array to initialize params
        	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
                //Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
                instance.run();
        }
    	@Test
        public void allTheOps() throws Exception {
                //scan, parse, and type check the program
               // String progname = "testSimple20";
                String input = "allTheOps file u {image i frame f \nu -> i -> gray -> convolve -> blur -> i -> f -> show;\n}";
                Scanner scanner = new Scanner(input);
                scanner.scan();
                Parser parser = new Parser(scanner);
                ASTNode program = parser.parse();
                TypeCheckVisitor v = new TypeCheckVisitor();
                program.visit(v, null);
                show(program);

                //generate code
                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
                byte[] bytecode = (byte[]) program.visit(cv, null);

                //output the generated bytecode
                CodeGenUtils.dumpBytecode(bytecode);

                //write byte code to file
                String name = ((Program) program).getName();
                String classFileName = "bin/" + name + ".class";
                OutputStream output = new FileOutputStream(classFileName);
                output.write(bytecode);
                output.close();
                System.out.println("wrote classfile to " + classFileName);

                // directly execute bytecode
               // String[] args = new String[1]; //create command line argument array to initialize params, none in this case
                //args[0] = "http://www.rd.com/wp-content/uploads/sites/2/2016/04/01-cat-wants-to-tell-you-laptop.jpg";
                String[] args = new String[]{"sleep.jpg", "sleep.jpg"}; //create String[] array to initialize params
        	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
                //Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
                instance.run();
        }
    	@Test
        public void readFromURLandDisplayDisplay2() throws Exception {
                //scan, parse, and type check the program
               // String progname = "testSimple20";
                String input = "readFromURLandDisplayDisplay2 url u {image i frame f \nu -> i -> f -> show;\n}";
                Scanner scanner = new Scanner(input);
                scanner.scan();
                Parser parser = new Parser(scanner);
                ASTNode program = parser.parse();
                TypeCheckVisitor v = new TypeCheckVisitor();
                program.visit(v, null);
                show(program);

                //generate code
                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
                byte[] bytecode = (byte[]) program.visit(cv, null);

                //output the generated bytecode
                CodeGenUtils.dumpBytecode(bytecode);

                //write byte code to file
                String name = ((Program) program).getName();
                String classFileName = "bin/" + name + ".class";
                OutputStream output = new FileOutputStream(classFileName);
                output.write(bytecode);
                output.close();
                System.out.println("wrote classfile to " + classFileName);

                // directly execute bytecode
               // String[] args = new String[1]; //create command line argument array to initialize params, none in this case
                //args[0] = "http://www.rd.com/wp-content/uploads/sites/2/2016/04/01-cat-wants-to-tell-you-laptop.jpg";
                String[] args = new String[]{"https://s-media-cache-ak0.pinimg.com/736x/3c/90/c2/3c90c2c8621dd72a7dbedaec431e8be7.jpg", "sleep.jpg"}; //create String[] array to initialize params
        	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
                //Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
                instance.run();
        }
    	@Test
        public void readFromURLandWriteToFile() throws Exception {
                //scan, parse, and type check the program
               // String progname = "testSimple20";
                String input = "readFromURLandWriteToFile url u, \nfile out \n{image i frame f \nu -> i;i -> f -> show; \n i -> out;\n}";
                Scanner scanner = new Scanner(input);
                scanner.scan();
                Parser parser = new Parser(scanner);
                ASTNode program = parser.parse();
                TypeCheckVisitor v = new TypeCheckVisitor();
                program.visit(v, null);
                show(program);

                //generate code
                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
                byte[] bytecode = (byte[]) program.visit(cv, null);

                //output the generated bytecode
                CodeGenUtils.dumpBytecode(bytecode);

                //write byte code to file
                String name = ((Program) program).getName();
                String classFileName = "bin/" + name + ".class";
                OutputStream output = new FileOutputStream(classFileName);
                output.write(bytecode);
                output.close();
                System.out.println("wrote classfile to " + classFileName);

                // directly execute bytecode
               // String[] args = new String[1]; //create command line argument array to initialize params, none in this case
                //args[0] = "http://www.rd.com/wp-content/uploads/sites/2/2016/04/01-cat-wants-to-tell-you-laptop.jpg";
                String[] args = new String[]{"https://s-media-cache-ak0.pinimg.com/736x/3c/90/c2/3c90c2c8621dd72a7dbedaec431e8be7.jpg", "sleep.jpg"}; //create String[] array to initialize params
        	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
                //Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
                instance.run();
        }
    	@Test
        public void blurImg() throws Exception {
                //scan, parse, and type check the program
               // String progname = "testSimple20";
                String input = "blurImg url u {image i frame f \nu -> i -> blur -> f -> show;\n}";
                Scanner scanner = new Scanner(input);
                scanner.scan();
                Parser parser = new Parser(scanner);
                ASTNode program = parser.parse();
                TypeCheckVisitor v = new TypeCheckVisitor();
                program.visit(v, null);
                show(program);

                //generate code
                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
                byte[] bytecode = (byte[]) program.visit(cv, null);

                //output the generated bytecode
                CodeGenUtils.dumpBytecode(bytecode);

                //write byte code to file
                String name = ((Program) program).getName();
                String classFileName = "bin/" + name + ".class";
                OutputStream output = new FileOutputStream(classFileName);
                output.write(bytecode);
                output.close();
                System.out.println("wrote classfile to " + classFileName);

                // directly execute bytecode
               // String[] args = new String[1]; //create command line argument array to initialize params, none in this case
                //args[0] = "http://www.rd.com/wp-content/uploads/sites/2/2016/04/01-cat-wants-to-tell-you-laptop.jpg";
                String[] args = new String[]{"https://s-media-cache-ak0.pinimg.com/736x/3c/90/c2/3c90c2c8621dd72a7dbedaec431e8be7.jpg", "sleep.jpg"}; //create String[] array to initialize params
        	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
                //Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
                instance.run();
        }
    	@Test
        public void mod() throws Exception {
                //scan, parse, and type check the program
               // String progname = "testSimple20";
                String input = "mod {integer x\n integer y\n integer z\n x <-33; \ny <- 3; \nz <- x%y;\n}";
                Scanner scanner = new Scanner(input);
                scanner.scan();
                Parser parser = new Parser(scanner);
                ASTNode program = parser.parse();
                TypeCheckVisitor v = new TypeCheckVisitor();
                program.visit(v, null);
                show(program);

                //generate code
                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
                byte[] bytecode = (byte[]) program.visit(cv, null);

                //output the generated bytecode
                CodeGenUtils.dumpBytecode(bytecode);

                //write byte code to file
                String name = ((Program) program).getName();
                String classFileName = "bin/" + name + ".class";
                OutputStream output = new FileOutputStream(classFileName);
                output.write(bytecode);
                output.close();
                System.out.println("wrote classfile to " + classFileName);

                // directly execute bytecode
               // String[] args = new String[1]; //create command line argument array to initialize params, none in this case
                //args[0] = "http://www.rd.com/wp-content/uploads/sites/2/2016/04/01-cat-wants-to-tell-you-laptop.jpg";
                String[] args = new String[]{"https://s-media-cache-ak0.pinimg.com/736x/3c/90/c2/3c90c2c8621dd72a7dbedaec431e8be7.jpg", "sleep.jpg"}; //create String[] array to initialize params
        	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
                //Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
                instance.run();
        }
    	@Test
        public void grayImg() throws Exception {
                //scan, parse, and type check the program
               // String progname = "testSimple20";
                String input = "grayImg url u {image i frame f \nu -> i -> gray -> f -> show;\n}";
                Scanner scanner = new Scanner(input);
                scanner.scan();
                Parser parser = new Parser(scanner);
                ASTNode program = parser.parse();
                TypeCheckVisitor v = new TypeCheckVisitor();
                program.visit(v, null);
                show(program);

                //generate code
                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
                byte[] bytecode = (byte[]) program.visit(cv, null);

                //output the generated bytecode
                CodeGenUtils.dumpBytecode(bytecode);

                //write byte code to file
                String name = ((Program) program).getName();
                String classFileName = "bin/" + name + ".class";
                OutputStream output = new FileOutputStream(classFileName);
                output.write(bytecode);
                output.close();
                System.out.println("wrote classfile to " + classFileName);

                // directly execute bytecode
               // String[] args = new String[1]; //create command line argument array to initialize params, none in this case
                //args[0] = "http://www.rd.com/wp-content/uploads/sites/2/2016/04/01-cat-wants-to-tell-you-laptop.jpg";
                String[] args = new String[]{"https://s-media-cache-ak0.pinimg.com/736x/3c/90/c2/3c90c2c8621dd72a7dbedaec431e8be7.jpg", "sleep.jpg"}; //create String[] array to initialize params
        	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
                //Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
                instance.run();
        }
    	@Test
        public void ivImage() throws Exception {
                //scan, parse, and type check the program
               // String progname = "testSimple20";
                String input = "ivImage url u {image i image j  frame f \nu -> j; \n i <- j/2; i -> f -> show;\n}";
                Scanner scanner = new Scanner(input);
                scanner.scan();
                Parser parser = new Parser(scanner);
                ASTNode program = parser.parse();
                TypeCheckVisitor v = new TypeCheckVisitor();
                program.visit(v, null);
                show(program);

                //generate code
                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
                byte[] bytecode = (byte[]) program.visit(cv, null);

                //output the generated bytecode
                CodeGenUtils.dumpBytecode(bytecode);

                //write byte code to file
                String name = ((Program) program).getName();
                String classFileName = "bin/" + name + ".class";
                OutputStream output = new FileOutputStream(classFileName);
                output.write(bytecode);
                output.close();
                System.out.println("wrote classfile to " + classFileName);

                // directly execute bytecode
               // String[] args = new String[1]; //create command line argument array to initialize params, none in this case
                //args[0] = "http://www.rd.com/wp-content/uploads/sites/2/2016/04/01-cat-wants-to-tell-you-laptop.jpg";
                String[] args = new String[]{"https://s-media-cache-ak0.pinimg.com/736x/3c/90/c2/3c90c2c8621dd72a7dbedaec431e8be7.jpg", "sleep.jpg"}; //create String[] array to initialize params
        	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
                //Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
                instance.run();
        }

    	@Test
        public void readFromURLandWriteScaledImageToFile() throws Exception {
                //scan, parse, and type check the program
               // String progname = "testSimple20";
                String input = "readFromURLandWriteScaledImageToFile url u, \nfile out \n{image i frame f \nu -> scale (3) -> i;i -> f -> show; \n i -> out;\n}";
                Scanner scanner = new Scanner(input);
                scanner.scan();
                Parser parser = new Parser(scanner);
                ASTNode program = parser.parse();
                TypeCheckVisitor v = new TypeCheckVisitor();
                program.visit(v, null);
                show(program);

                //generate code
                CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
                byte[] bytecode = (byte[]) program.visit(cv, null);

                //output the generated bytecode
                CodeGenUtils.dumpBytecode(bytecode);

                //write byte code to file
                String name = ((Program) program).getName();
                String classFileName = "bin/" + name + ".class";
                OutputStream output = new FileOutputStream(classFileName);
                output.write(bytecode);
                output.close();
                System.out.println("wrote classfile to " + classFileName);

                // directly execute bytecode
               // String[] args = new String[1]; //create command line argument array to initialize params, none in this case
                //args[0] = "http://www.rd.com/wp-content/uploads/sites/2/2016/04/01-cat-wants-to-tell-you-laptop.jpg";
                String[] args = new String[]{"https://s-media-cache-ak0.pinimg.com/736x/3c/90/c2/3c90c2c8621dd72a7dbedaec431e8be7.jpg", "sleep.jpg"}; //create String[] array to initialize params
        	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
                //Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
                instance.run();
        }
    	 public void readFromFile() throws Exception {
             //scan, parse, and type check the program
            // String progname = "testSimple20";
             String input = "readFromFile file u {image i frame f \nu -> i;i -> f -> show; \n}";
             Scanner scanner = new Scanner(input);
             scanner.scan();
             Parser parser = new Parser(scanner);
             ASTNode program = parser.parse();
             TypeCheckVisitor v = new TypeCheckVisitor();
             program.visit(v, null);
             show(program);

             //generate code
             CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
             byte[] bytecode = (byte[]) program.visit(cv, null);

             //output the generated bytecode
             CodeGenUtils.dumpBytecode(bytecode);

             //write byte code to file
             String name = ((Program) program).getName();
             String classFileName = "bin/" + name + ".class";
             OutputStream output = new FileOutputStream(classFileName);
             output.write(bytecode);
             output.close();
             System.out.println("wrote classfile to " + classFileName);

             // directly execute bytecode
            // String[] args = new String[1]; //create command line argument array to initialize params, none in this case
             //args[0] = "http://www.rd.com/wp-content/uploads/sites/2/2016/04/01-cat-wants-to-tell-you-laptop.jpg";
             String[] args = new String[]{"https://s-media-cache-ak0.pinimg.com/736x/3c/90/c2/3c90c2c8621dd72a7dbedaec431e8be7.jpg", "sleep.jpg"}; //create String[] array to initialize params
     	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
             //Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
             instance.run();
     }
    	 public void barArrowGray() throws Exception {
             //scan, parse, and type check the program
            // String progname = "testSimple20";
             String input = "barArrowGray url u {image i frame f \nu -> i |-> gray -> f -> show;\n}";
             Scanner scanner = new Scanner(input);
             scanner.scan();
             Parser parser = new Parser(scanner);
             ASTNode program = parser.parse();
             TypeCheckVisitor v = new TypeCheckVisitor();
             program.visit(v, null);
             show(program);

             //generate code
             CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
             byte[] bytecode = (byte[]) program.visit(cv, null);

             //output the generated bytecode
             CodeGenUtils.dumpBytecode(bytecode);

             //write byte code to file
             String name = ((Program) program).getName();
             String classFileName = "bin/" + name + ".class";
             OutputStream output = new FileOutputStream(classFileName);
             output.write(bytecode);
             output.close();
             System.out.println("wrote classfile to " + classFileName);

             // directly execute bytecode
            // String[] args = new String[1]; //create command line argument array to initialize params, none in this case
             //args[0] = "http://www.rd.com/wp-content/uploads/sites/2/2016/04/01-cat-wants-to-tell-you-laptop.jpg";
             String[] args = new String[]{"https://s-media-cache-ak0.pinimg.com/736x/3c/90/c2/3c90c2c8621dd72a7dbedaec431e8be7.jpg", "sleep.jpg"}; //create String[] array to initialize params
     	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
             //Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
             instance.run();
     }
    	 public void assignImage() throws Exception {
             //scan, parse, and type check the program
            // String progname = "testSimple20";
             String input = "assignImage url u {image i image j frame f \nu -> i; j <- i;j -> f -> show;\n}";
             Scanner scanner = new Scanner(input);
             scanner.scan();
             Parser parser = new Parser(scanner);
             ASTNode program = parser.parse();
             TypeCheckVisitor v = new TypeCheckVisitor();
             program.visit(v, null);
             show(program);

             //generate code
             CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
             byte[] bytecode = (byte[]) program.visit(cv, null);

             //output the generated bytecode
             CodeGenUtils.dumpBytecode(bytecode);

             //write byte code to file
             String name = ((Program) program).getName();
             String classFileName = "bin/" + name + ".class";
             OutputStream output = new FileOutputStream(classFileName);
             output.write(bytecode);
             output.close();
             System.out.println("wrote classfile to " + classFileName);

             // directly execute bytecode
            // String[] args = new String[1]; //create command line argument array to initialize params, none in this case
             //args[0] = "http://www.rd.com/wp-content/uploads/sites/2/2016/04/01-cat-wants-to-tell-you-laptop.jpg";
             String[] args = new String[]{"https://s-media-cache-ak0.pinimg.com/736x/3c/90/c2/3c90c2c8621dd72a7dbedaec431e8be7.jpg", "sleep.jpg"}; //create String[] array to initialize params
     	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
             //Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
             instance.run();
     }
    	 public void scaleImage() throws Exception {
             //scan, parse, and type check the program
            // String progname = "testSimple20";
             String input = "scaleImage url u {image i frame f \nu -> i -> f -> show; frame f2  \ni -> scale (3) -> f2 -> show;\n}";
             Scanner scanner = new Scanner(input);
             scanner.scan();
             Parser parser = new Parser(scanner);
             ASTNode program = parser.parse();
             TypeCheckVisitor v = new TypeCheckVisitor();
             program.visit(v, null);
             show(program);

             //generate code
             CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
             byte[] bytecode = (byte[]) program.visit(cv, null);

             //output the generated bytecode
             CodeGenUtils.dumpBytecode(bytecode);

             //write byte code to file
             String name = ((Program) program).getName();
             String classFileName = "bin/" + name + ".class";
             OutputStream output = new FileOutputStream(classFileName);
             output.write(bytecode);
             output.close();
             System.out.println("wrote classfile to " + classFileName);

             // directly execute bytecode
            // String[] args = new String[1]; //create command line argument array to initialize params, none in this case
             //args[0] = "http://www.rd.com/wp-content/uploads/sites/2/2016/04/01-cat-wants-to-tell-you-laptop.jpg";
             String[] args = new String[]{"https://s-media-cache-ak0.pinimg.com/736x/3c/90/c2/3c90c2c8621dd72a7dbedaec431e8be7.jpg", "sleep.jpg"}; //create String[] array to initialize params
     	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
             //Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
             instance.run();
     }
    	 public void imgMove() throws Exception {
             //scan, parse, and type check the program
            // String progname = "testSimple20";
             String input = "imgMove url u {image i frame f \nu -> i;i -> f -> show; \nsleep 5; \ninteger x \ninteger y \nf -> xloc -> x; \nf -> yloc -> y; \nf -> move (x+100,y-100) -> show;\n}";
             Scanner scanner = new Scanner(input);
             scanner.scan();
             Parser parser = new Parser(scanner);
             ASTNode program = parser.parse();
             TypeCheckVisitor v = new TypeCheckVisitor();
             program.visit(v, null);
             show(program);

             //generate code
             CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
             byte[] bytecode = (byte[]) program.visit(cv, null);

             //output the generated bytecode
             CodeGenUtils.dumpBytecode(bytecode);

             //write byte code to file
             String name = ((Program) program).getName();
             String classFileName = "bin/" + name + ".class";
             OutputStream output = new FileOutputStream(classFileName);
             output.write(bytecode);
             output.close();
             System.out.println("wrote classfile to " + classFileName);

             // directly execute bytecode
            // String[] args = new String[1]; //create command line argument array to initialize params, none in this case
             //args[0] = "http://www.rd.com/wp-content/uploads/sites/2/2016/04/01-cat-wants-to-tell-you-laptop.jpg";
             String[] args = new String[]{"https://s-media-cache-ak0.pinimg.com/736x/3c/90/c2/3c90c2c8621dd72a7dbedaec431e8be7.jpg", "sleep.jpg"}; //create String[] array to initialize params
     	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
             //Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
             instance.run();
     }
    	 public void assignImageAndFrame() throws Exception {
             //scan, parse, and type check the program
            // String progname = "testSimple20";
             String input = "assignImageAndFrame url u {image i image i1 frame f frame f1\nu -> i -> f -> show; frame f2  \ni -> scale (3) -> f2 -> show; \n i1 <- i; \n f2 <- f;\n}";
             Scanner scanner = new Scanner(input);
             scanner.scan();
             Parser parser = new Parser(scanner);
             ASTNode program = parser.parse();
             TypeCheckVisitor v = new TypeCheckVisitor();
             program.visit(v, null);
             show(program);

             //generate code
             CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
             byte[] bytecode = (byte[]) program.visit(cv, null);

             //output the generated bytecode
             CodeGenUtils.dumpBytecode(bytecode);

             //write byte code to file
             String name = ((Program) program).getName();
             String classFileName = "bin/" + name + ".class";
             OutputStream output = new FileOutputStream(classFileName);
             output.write(bytecode);
             output.close();
             System.out.println("wrote classfile to " + classFileName);

             // directly execute bytecode
            // String[] args = new String[1]; //create command line argument array to initialize params, none in this case
             //args[0] = "http://www.rd.com/wp-content/uploads/sites/2/2016/04/01-cat-wants-to-tell-you-laptop.jpg";
             String[] args = new String[]{"https://s-media-cache-ak0.pinimg.com/736x/3c/90/c2/3c90c2c8621dd72a7dbedaec431e8be7.jpg", "sleep.jpg"}; //create String[] array to initialize params
     	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
             //Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
             instance.run();
     }
    	 public void booleanBinaryExpression() throws Exception {
             //scan, parse, and type check the program
            // String progname = "testSimple20";
             String input = "booleanBinaryExpression \nboolean  b0, boolean b1{  \n boolean b3 boolean b4 b3 <- b0 & b1; b4 <- b0 | b1;}";
             Scanner scanner = new Scanner(input);
             scanner.scan();
             Parser parser = new Parser(scanner);
             ASTNode program = parser.parse();
             TypeCheckVisitor v = new TypeCheckVisitor();
             program.visit(v, null);
             show(program);

             //generate code
             CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
             byte[] bytecode = (byte[]) program.visit(cv, null);

             //output the generated bytecode
             CodeGenUtils.dumpBytecode(bytecode);

             //write byte code to file
             String name = ((Program) program).getName();
             String classFileName = "bin/" + name + ".class";
             OutputStream output = new FileOutputStream(classFileName);
             output.write(bytecode);
             output.close();
             System.out.println("wrote classfile to " + classFileName);

             // directly execute bytecode
            // String[] args = new String[1]; //create command line argument array to initialize params, none in this case
             //args[0] = "http://www.rd.com/wp-content/uploads/sites/2/2016/04/01-cat-wants-to-tell-you-laptop.jpg";
             String[] args = new String[]{"https://s-media-cache-ak0.pinimg.com/736x/3c/90/c2/3c90c2c8621dd72a7dbedaec431e8be7.jpg", "sleep.jpg"}; //create String[] array to initialize params
     	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
             //Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
             instance.run();
     }

     @Test
     public void exprComp() throws Exception {
             //scan, parse, and type check the program
            // String progname = "testSimple20";
             String input = "exprComp { integer a a<-2; integer b b<-3; a <- b - a * (2 / 2 -6) +5%2 + 5/2;} ";
             Scanner scanner = new Scanner(input);
             scanner.scan();
             Parser parser = new Parser(scanner);
             ASTNode program = parser.parse();
             TypeCheckVisitor v = new TypeCheckVisitor();
             program.visit(v, null);
             show(program);

             //generate code
             CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
             byte[] bytecode = (byte[]) program.visit(cv, null);

             //output the generated bytecode
             CodeGenUtils.dumpBytecode(bytecode);

             //write byte code to file
             String name = ((Program) program).getName();
             String classFileName = "bin/" + name + ".class";
             OutputStream output = new FileOutputStream(classFileName);
             output.write(bytecode);
             output.close();
             System.out.println("wrote classfile to " + classFileName);

             // directly execute bytecode
             String[] args = new String[0]; //create command line argument array to initialize params, none in this case
             Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
             instance.run();
     }

     @Test
     public void testIfBinaryLTIntLitCondition() throws Exception {
             //scan, parse, and type check the program
             String progname = "testSimple20";
             String input = progname + " {boolean a integer b integer c c<-6; b<-4; if(b<c) {a<-true;}}";
             Scanner scanner = new Scanner(input);
             scanner.scan();
             Parser parser = new Parser(scanner);
             ASTNode program = parser.parse();
             TypeCheckVisitor v = new TypeCheckVisitor();
             program.visit(v, null);
             show(program);

             //generate code
             CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
             byte[] bytecode = (byte[]) program.visit(cv, null);

             //output the generated bytecode
             CodeGenUtils.dumpBytecode(bytecode);

             //write byte code to file
             String name = ((Program) program).getName();
             String classFileName = "bin/" + name + ".class";
             OutputStream output = new FileOutputStream(classFileName);
             output.write(bytecode);
             output.close();
             System.out.println("wrote classfile to " + classFileName);

             // directly execute bytecode
             String[] args = new String[0]; //create command line argument array to initialize params, none in this case
             Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
             instance.run();
     }
     }